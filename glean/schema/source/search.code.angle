# Copyright (c) Facebook, Inc. and its affiliates.

schema search.code.16 {
import code.24
import code.cxx.4
import code.hack.4
import code.java.5
import code.python.1
import cxx1.5
import flow.3
import hack.6
import buck.4
import javakotlin.alpha.1
import erlang.1
import hs.2
import lsif.2
import pp1.1
import python.4
import search.cxx.5
import search.erlang.4
import search.flow.1
import search.hack.7
import search.hs.9
import search.java.1
import search.kotlin.1
import search.python.1
import thrift.7
import fbthrift.1

#
# public API
#

# global symbol search with language constraint
predicate SearchByNameAndLanguage:
  {
    name: string,
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Language, Entity } where
    ( Hack = Language; HackSearchByName { Name, Entity } ) |
    ( Python = Language; PythonSearchByName { Name, Entity } ) |
    ( JavaScript = Language; FlowSearchByName { Name, Entity } ) |
    ( Java = Language; JavaSearchByName { Name, Entity } ) |
    ( Kotlin = Language; KotlinSearchByName { Name, Entity } ) |
    ( Cpp = Language; CxxSearchByName { Name, Entity } ) |
    ( PreProcessor = Language; PpSearchByName { Name, Entity } ) |
    ( Haskell = Language; HsSearchByName { Name, Entity } ) |
    ( Erlang = Language; ErlangSearchByName { Name, Entity } ) |
    ( Thrift = Language; ThriftSearchByName { Name, Entity } ) |
    ( Buck = Language; BuckSearchByName { Name, Entity } );
    code.EntityLanguage { Entity, Language }; # double check the entity lang

# global symbol search normalized to lower case
predicate SearchByLowerCaseNameAndLanguage:
  {
    name: string,
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Language, Entity } where
    ( Hack = Language; HackSearchByLowerCaseName { Name, Entity } ) |
    ( Python = Language; PythonSearchByLowerCaseName { Name, Entity } ) |
    ( JavaScript = Language; FlowSearchByLowerCaseName { Name, Entity } ) |
    ( Java = Language; JavaSearchByLowerCaseName { Name, Entity } ) |
    ( Kotlin = Language; KotlinSearchByLowerCaseName { Name, Entity } ) |
    ( Cpp = Language; CxxSearchByLowerCaseName { Name, Entity } ) |
    ( PreProcessor = Language; PpSearchByLowerCaseName { Name, Entity } ) |
    ( Haskell = Language; HsSearchByLowerCaseName { Name, Entity } ) |
    ( Erlang = Language; ErlangSearchByLowerCaseName { Name, Entity } ) |
    ( Thrift = Language; ThriftSearchByLowerCaseName { Name, Entity } ) |
    ( Buck = Language; BuckSearchByLowerCaseName { Name, Entity } );
    code.EntityLanguage { Entity, Language }; # double check the entity lang

# scoped search (experimental!)

predicate SearchByScope:
  {
    name: string,
    scope: [string],
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Scope, Language, Entity } where
    ( Cpp = Language; CxxSearchByScope { Name, Scope, Entity } ) |
    ( Hack = Language; HackSearchByScope { Name, Scope, Entity } ) |
    ( Python = Language; PythonSearchByScope { Name, Scope, Entity } ) |
    ( JavaScript = Language; FlowSearchByScope { Name, Scope, Entity } ) |
    ( Java = Language; JavaSearchByScope { Name, Scope, Entity } ) |
    ( Kotlin = Language; KotlinSearchByScope { Name, Scope, Entity } );
    code.EntityLanguage { Entity, Language };

# lower case by scope
predicate SearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    language: code.Language,
    entity: code.Entity,
  }
  { Name, Scope, Language, Entity } where
    ( Cpp = Language; CxxSearchByLowerCaseScope { Name, Scope, Entity } ) |
    ( Hack = Language; HackSearchByLowerCaseScope { Name, Scope, Entity } ) |
    ( Python = Language; PythonSearchByLowerCaseScope { Name, Scope, Entity }) |
    ( JavaScript = Language; FlowSearchByLowerCaseScope { Name, Scope, Entity})|
    ( Java = Language; JavaSearchByLowerCaseScope { Name, Scope, Entity}) |
    ( Kotlin = Language; KotlinSearchByLowerCaseScope { Name, Scope, Entity});
    code.EntityLanguage { Entity, Language };

#
# Language-specific identifier search
#

predicate HackSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    Name = hack.Name NameStr;
    HackSearchByNameWithName { Name, Entity };

predicate HackSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
    hack.NameLowerCase { Name, NameCase };
    HackSearchByNameWithName { NameCase, Entity };

# Helper to reuse the Name fact found previously
predicate HackSearchByNameWithName:
  {
    name : hack.Name,
    entity : code.Entity
  }
  { Name, { hack = { decl = Decl }}} where
    search.hack.SearchByName { name = Name, decl = Decl };

predicate HackSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    Name = hack.Name NameStr;
    Insensitive = false;
    HackSearchByScopeWithName { Name, Insensitive, Query, Entity }

predicate HackSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity} where
    hack.NameLowerCase { NameStr, Name };
    Insensitive = true;
    HackSearchByScopeWithName { Name, Insensitive, Query, Entity }

# private helper to share name facts between the calsl
#
# by always using the matched namespace we make prevent scope wildcards
# e.g. C\count won't match Test\C\count
# we could try to interpret prefix mode this way though
#
predicate HackSearchByScopeWithName:
  {
    name: hack.Name,
    insenstive : bool,
    scope: [string],
    entity: code.Entity,
  }
  { Name, Insensitive, Scope, { hack = { decl = Decl }}} where
    if ( [] = Scope; true | false = Insensitive )
      then (
        ( # exactly global declarations
          search.hack.SearchInNamespace { Name, nothing, Decl }
        ) | (
          # or global namespace alias children ("FlibSL\Vec" or "C" work)
          hack.GlobalNamespaceAlias { Name, NSQName };
          NSDecl = hack.NamespaceDeclaration { name = NSQName };
          { namespace_ = NSDecl } = Decl
        ) | (
          # or children of auto-imported namespaces (just HH for now)
          search.hack.HackInAutoImportedNamespace { Name, HHNSQName };
          search.hack.SearchInNamespace { Name, HHNSQName, Decl }
        )
      )
      else (
        # search within specific context
        search.hack.QueryToScopeCase { Scope, Insensitive, ScopeName, ScopeNamespace };
        search.hack.SearchInContext { Name, ScopeName, ScopeNamespace, Decl }
      );

predicate PythonSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    LocalName = python.LocalName NameStr;
    PythonSearchByLocalNameFact { LocalName, Entity }

predicate PythonSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    python.LocalNameLowerCase { NameStr, LocalName };
    PythonSearchByLocalNameFact { LocalName, Entity }

# helper to avoid repeatedly doing string search
predicate PythonSearchByLocalNameFact:
  {
    name: python.LocalName,
    entity: code.Entity,
  }
  { LocalName, { python = { decl = Decl }}} where
    python.SearchByLocalName { LocalName, Decl };
    python.NonImportDeclaration Decl;

predicate PythonSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    LocalName = python.LocalName NameStr;
    Insensitive = false;
    PythonSearchByScopeWithName { LocalName, Insensitive, Query, Entity }

predicate PythonSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity} where
    python.LocalNameLowerCase { NameStr, LocalName };
    Insensitive = true;
    PythonSearchByScopeWithName { LocalName, Insensitive, Query, Entity }

# Private: search by scope anchored on a local_name fact
predicate PythonSearchByScopeWithName:
  {
    name: python.LocalName,
    insensitive : bool,
    scope: [string],
    entity: code.Entity,
  }
  { LocalName, Insensitive, Scope, { python = { decl = Decl }}} where
    LocalName = python.LocalName NameStr;
    search.python.QueryToScopeCase { Scope, Insensitive, MSName };
    SName = python.SName { python.Name NameStr, MSName };
    python.DeclarationWithSName { SName, Decl };
    python.NonImportDeclaration Decl;

predicate FlowSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    ( Name = flow.Name NameStr;
      FlowSearchByNameWithFact { Name, Entity }
    ) | (
      flow.SearchByNameModule { NameStr, Mod };
      { flow = { module_ = Mod } } = Entity
    )

predicate FlowSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    ( flow.NameLowerCase { NameStr, Name };
      FlowSearchByNameWithFact { Name, Entity }
    ) | (
      flow.ModuleNameLowerCase { NameStr, Mod };
      { flow = { module_ = Mod } } = Entity
    )

# helper to share Name fact in the lower case scenario
#
# Similar to C++ and Python, we don't include import declarations
# in search results, as they are too noisy
#
predicate FlowSearchByNameWithFact:
  {
    name: flow.Name,
    entity: code.Entity
  }
  { Name, { flow = { decl = Decl } } } where
    search.flow.FlowSearchByNameNonImport { Name, Decl };

# Flow scope search: just parent module -> decl pairs for now
predicate FlowSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    Name = flow.Name NameStr;
    Insensitive = false;
    FlowSearchByScopeWithName { Name, Insensitive, Query, Entity }

predicate FlowSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    flow.NameLowerCase { NameStr, Name };
    Insensitive = true;
    FlowSearchByScopeWithName { Name, Insensitive, Query, Entity }

predicate FlowSearchByScopeWithName:
  {
    name: flow.Name,
    insensitive : bool,
    scope: [string],
    entity: code.Entity,
  }
  { Name, Insensitive, Query, Entity } where
    search.flow.QueryToScopeCase { Query, Insensitive, Scope };
    { just = Module } = Scope; # every decl is contained in something?
    search.flow.FlowSearchByNameNonImport { Name, Decl };
    flow.ModuleContains { Module, Decl }; # filter on membership
    { flow = { decl = Decl } } = Entity;

predicate JavaSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    Name = javakotlin.alpha.Name NameStr;
    QName = javakotlin.alpha.QName { name = Name };
    JavaSearchByNameWithFact { QName, Entity }

predicate JavaSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    javakotlin.alpha.NameLowerCase { NameStr, Name };
    QName = javakotlin.alpha.QName { name = Name };
    JavaSearchByNameWithFact { QName, Entity }

predicate JavaSearchByNameWithFact:
  {
    name: javakotlin.alpha.QName,
    entity: code.Entity
  }
  { QName, { java = { decl = Decl } } } where
    search.java.SearchByQName { QName, Decl };

predicate JavaSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity
  }
  { NameStr, Query, Entity } where
    Name = javakotlin.alpha.Name NameStr;
    Insensitive = false;
    JavaSearchByScopeWithName { Name, Insensitive, Query, Entity }

predicate JavaSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    javakotlin.alpha.NameLowerCase { NameStr, Name };
    Insensitive = true;
    JavaSearchByScopeWithName { Name, Insensitive, Query, Entity }

predicate JavaSearchByScopeWithName:
  {
    name: javakotlin.alpha.Name,
    insensitive : bool,
    scope: [string],
    entity: code.Entity,
  }
  { Name, Insensitive, Query, Entity } where
    search.java.QueryToScopeCase { Query, Insensitive, Path };
    QName = javakotlin.alpha.QName { name = Name, context = Path };
    search.java.SearchByQName { QName, Decl };
    { java = { decl = Decl } } = Entity;

predicate KotlinSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    Name = javakotlin.alpha.Name NameStr;
    QName = javakotlin.alpha.QName { name = Name };
    KotlinSearchByNameWithFact { QName, Entity }

predicate KotlinSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    javakotlin.alpha.NameLowerCase { NameStr, Name };
    QName = javakotlin.alpha.QName { name = Name };
    KotlinSearchByNameWithFact { QName, Entity }

predicate KotlinSearchByNameWithFact:
  {
    name: javakotlin.alpha.QName,
    entity: code.Entity
  }
  { QName, { kotlin = { decl = Decl } } } where
    search.kotlin.SearchByQName { QName, Decl };

predicate KotlinSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity
  }
  { NameStr, Query, Entity } where
    Name = javakotlin.alpha.Name NameStr;
    Insensitive = false;
    KotlinSearchByScopeWithName { Name, Insensitive, Query, Entity }

predicate KotlinSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    javakotlin.alpha.NameLowerCase { NameStr, Name };
    Insensitive = true;
    KotlinSearchByScopeWithName { Name, Insensitive, Query, Entity }

predicate KotlinSearchByScopeWithName:
  {
    name: javakotlin.alpha.Name,
    insensitive : bool,
    scope: [string],
    entity: code.Entity,
  }
  { Name, Insensitive, Query, Entity } where
    search.java.QueryToScopeCase { Query, Insensitive, Path }; # n.b. java
    QName = javakotlin.alpha.QName { name = Name, context = Path };
    search.kotlin.SearchByQName { QName, Decl };
    { kotlin = { decl = Decl } } = Entity;

predicate CxxSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    Name = cxx1.Name NameStr;
    CxxSearchByNameAndScopeFact { name = Name, entity = Entity };

predicate CxxSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
  cxx1.DeclByName { name_lowercase = NameStr, ident = Id };
  (
    { name = Name } = Id;
    CxxSearchByNameAndScopeFact { name = Name, entity = Entity };
  ) | (
    { selector = Sel } = Id;
    search.cxx.SearchBySelector { Sel, Ent };
    { cxx = Ent } = Entity;
  )

predicate CxxSearchByScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    search.cxx.QueryToScopeCase { Query, false, Scope };
    Name = cxx1.Name NameStr;
    CxxSearchByNameAndScopeFact { Name, Scope, Entity }

predicate CxxSearchByLowerCaseScope:
  {
    name: string,
    scope: [string],
    entity: code.Entity,
  }
  { NameStr, Query, Entity } where
    cxx1.DeclByName { name_lowercase = NameStr, ident = { name = Name } };
    search.cxx.QueryToScopeCase { Query, true, Scope };
    CxxSearchByNameAndScopeFact { Name, Scope, Entity };

predicate CxxSearchByNameAndScopeFact:
  {
    name: cxx1.Name,
    scope : cxx1.Scope,
    entity : code.Entity
  }
  { Name, Scope, { cxx = DefnE }} where
    search.cxx.SearchByNameAndScope { Name, Scope, Ent };
    if ({ decl = Decl } = Ent)
      then (
        # avoid returning all members of decl families
        if (search.cxx.DeclIsDefn { Decl, Defn })
          then ({ defn = Defn } = DefnE)
          else ({ decl = Decl } = DefnE)
        )
      else ( Ent = DefnE );

predicate PpSearchByName:
  {
    name: string,
    entity: code.Entity
  }
  { NameStr, Entity } where
    Macro = pp1.Macro NameStr;
    PpSearchByMacroFact { macro = Macro, entity = Entity };

# n.b. this reuses the stored, derived lower case pp1.Macro in cxx1.DeclByName
predicate PpSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity
  }
  { NameStr, Entity } where
    cxx1.DeclByName { name_lowercase = NameStr, ident = { macro = Macro } };
    PpSearchByMacroFact { macro = Macro, entity = Entity };

predicate PpSearchByMacroFact:
  {
    macro: pp1.Macro,
    entity : code.Entity
  }
  { Macro, { pp = { define = Defn } } } where
    Defn = pp1.Define { macro = Macro }

predicate ThriftSearchByName:
  {
    name: string,
    entity: code.Entity
  }
  { Name, Entity } where
    ( Ident = thrift.Identifier Name;
      ThriftSearchByNameFact { Ident, Entity } ) |
    ( Ident = fbthrift.Identifier Name;
      FbthriftSearchByNameFact { Ident, Entity } )

predicate ThriftSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity
  }
  { NameStr, Entity } where
    ( thrift.NameLowerCase { NameStr, Ident };
      ThriftSearchByNameFact { Ident, Entity } ) |
    ( fbthrift.NameLowerCase { NameStr, Ident };
      FbthriftSearchByNameFact { Ident, Entity } )

predicate ThriftSearchByNameFact:
  {
    name: thrift.Identifier,
    entity: code.Entity
  }
  { Ident, { thrift = { decl = Decl } }} where
    thrift.SearchByName { Ident, QName };
    thrift.DeclarationName { QName, Decl }

predicate FbthriftSearchByNameFact:
  {
    name: fbthrift.Identifier,
    entity: code.Entity
  }
  { Ident, { fbthrift = { decl = Decl } }} where
    fbthrift.SearchByName { Ident, QName };
    fbthrift.DeclarationName { QName, Decl }

predicate BuckSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    LocalName = buck.LocalName NameStr;
    BuckSearchByLocalNameFact { LocalName, Entity }

predicate BuckSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { NameStr, Entity } where
    buck.LocalNameLowerCase { NameStr, LocalName };
    BuckSearchByLocalNameFact { LocalName, Entity }

# helper to avoid repeatedly doing string search
predicate BuckSearchByLocalNameFact:
  {
    name: buck.LocalName,
    entity: code.Entity,
  }
  { LocalName, { buck = Decl }} where
    buck.SearchByLocalName { LocalName, Decl }

predicate HsSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { hs = E } } where
  search.hs.SearchByName { name = Name, entity = E }

predicate HsSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  (
    hs.ModuleNameLowerCase { Name, hs.ModuleName NameCase } |
    hs.FunctionNameLowerCase { Name, hs.FunctionName NameCase } |
    hs.DefinitionNameLowerCase { Name, hs.DefinitionName NameCase } |
    hs.ClassNameLowerCase { Name, hs.ClassName NameCase }
  );
  HsSearchByName { NameCase, Entity };

predicate ErlangSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { erlang = E } } where
  search.erlang.SearchByName { name = Name, entity = E }

predicate ErlangSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, Entity } where
  erlang.NameLowerCase { Name, NameCase };
  ErlangSearchByName { NameCase, Entity }

predicate LsifSearchByName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { lsif = Entity } } where
  lsif.SearchByName { lsif.Name Name, Entity }

predicate LsifSearchByLowerCaseName:
  {
    name: string,
    entity: code.Entity,
  }
  { Name, { lsif = Entity } } where
  lsif.NameLowerCase { Name, NameCase };
  lsif.SearchByName { NameCase, Entity }

}
