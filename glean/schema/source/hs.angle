# Copyright (c) Meta Platforms, Inc. and affiliates.

schema hs.3 {
import src

# E.g. 'Data.Maybe'
predicate ModuleName : string

# Definition location by identifier string
predicate DefinitionName : string

# Maps lower-case strings to DefinitionName, for case-insensitive search
predicate DefinitionNameLowerCase:
  {
    nameLowerCase: string,
    name: DefinitionName,
  }
  stored { prim.toLower Str, N } where N = DefinitionName Str

predicate Definition :
  {
    name : DefinitionName,
    source : src.FileLocation,
  }

# Type of "entities" that have a definition location
# to match code.hs.angle:Entity
type DefinitionEntity =
  {
    definition : Definition |
  }

# Index by file.
predicate FileDefinition:
  {
    file : src.File,
    defn : DefinitionEntity,
  } stored
  { File, { definition = Defn } }
    where
      Defn = Definition { source = { File, _ } }

# From an entity, find name and location
predicate DefinitionLocation:
  {
    defn: DefinitionEntity,
    name: string,
    source: src.FileLocation,
  }
  { Entity, Name, { File, Span }}
    where
      { definition = { DefinitionName Name, { File, Span }} } = Entity;

type XRefTarget =
  {
    definition : hs.DefinitionName |
  }

# Cross-references per file, for code exploration integrations
predicate FileXRefMap :
  {
    file : src.File,
    refs : [XReference],
  }

# Cross-references in a file, for code exploration integrations
type XReference =
  {
    target : XRefTarget,
    spans : [src.ByteSpan],
  }

predicate TargetUses:
  {
    target: Definition,
    file: src.File,
    uses: [src.ByteSpan]
  } stored {{name = DefN}, File, Uses} where
  FileXRefMap {file = File, refs = Refs};
  {target = {definition = DefN}, spans = Uses} = Refs[..];

# ----------------------------------------------------------------------------
# NEW from here

# Names: more or less matching GHC's Name/OccName/Module structure
# but with fields ordered to allow searching by name.

type Namespace = enum { var_ | datacon | tyvar | tycon }

predicate UnitName : string

predicate Module:
  {
    name: ModuleName,
    unit: UnitName,
  }

predicate ModuleSource:
  {
    mod: Module,
    file: src.File,
  }

predicate SourceModule:
  {
    file: src.File,
    mod: Module,
  }
  stored { File, Mod } where ModuleSource { Mod, File }

predicate OccName:
  {
    name: string,
    namespace_: Namespace,
  }

type NameSort =
  {
    external: {} |
      # An exported entity, uniquely identified by its OccName and Module.
    internal: src.ByteSpan |
      # A local binder, e.g. bound by a pattern-match, let. or where,
      # or a non-exported entity. These are uniquely identified by
      # the OccName, Module and ByteSpan.
  }

# Name: a unique key for an entity
predicate Name:
  {
    occ: OccName,
    mod: Module,
    sort: NameSort,
  }

# Declarations / definitions

type Declaration =
  {
    val: ValBind |
    typeFamily: TypeFamilyDecl |
    type_: TypeSynDecl |
    data: DataDecl |
    con: ConDecl |
    patSyn: PatSynDecl |
    class_: ClassDecl |
    method: MethodDecl |
    instance: InstanceDecl |
    patBind: PatBind |
    tyVarBind: TyVarBind |
    field: RecFieldDecl |
  }

predicate DeclarationOfName:
  {
    name: Name,
    decl: Declaration,
  }
  # maybe store this? Turns 12 lookups into 1 lookup.
  { N, { val = { name = N }}} |
  { N, { typeFamily = { name = N }}} |
  { N, { type_ = { name = N }}} |
  { N, { data = { name = N }}} |
  { N, { con = { name = N }}} |
  { N, { patSyn = { name = N }}} |
  { N, { class_ = { name = N }}} |
  { N, { method = { name = N }}} |
  { N, { instance = { name = N }}} |
  { N, { patBind = { name = N }}} |
  { N, { tyVarBind = { name = N }}} |
  { N, { field = { name = N }}}

predicate ValBind:
  {
    name: Name,
    # type
    # fixity
    # location of signature
  }

predicate TypeFamilyDecl:
  {
    name: Name,
  }

predicate TypeSynDecl:
  {
    name: Name,
  }

predicate DataDecl:
  {
    name: Name,
    # constructors
  }

predicate ConDecl:
  {
    name: Name,
    # fields, etc.
  }

predicate PatSynDecl:
  {
    name: Name,
  }

predicate ClassDecl:
  {
    name: Name,
    # superclass constraints
    # methods
    # defaults
  }

predicate MethodDecl:
  {
    name: Name,
    # type
    # default decl
  }

predicate InstanceDecl:
  {
    name: Name,
    # class
    # parameters etc.
  }

predicate PatBind:
  {
    name: Name,
  }

predicate TyVarBind:
  {
    name: Name,
  }

predicate RecFieldDecl:
  {
    name: Name,
    # type
  }

predicate DeclarationLocation:
  {
    name: Name,
    file: src.File,
    span: src.ByteSpan
  }

predicate ModuleDeclarations:
  {
    module: Module,
    names: set Name,
  }

# References

type RefSpan =
  {
    kind: RefKind,
    span: src.ByteSpan,
  }

# It's useful to be able to distinguish import/export refs from code refs,
# because e.g. dead code can still have import/export refs.
type RefKind = enum { importref | exportref | coderef }

predicate Reference:
  {
    name: Name,
    refs: [RefSpan],
  }

predicate FileXRefs :
  {
    file : src.File,
    refs : [Reference],
  }

predicate OccNameLowerCase:
  {
    nameLowerCase: string,
    occName: OccName,
  }
  stored { prim.toLower Str, N } where N = OccName { name = Str }

predicate NameRefs:
  {
    target: Name,
    file: src.File,
    uses: [RefSpan]
  } stored {Name, File, Uses} where
  FileXRefs {file = File, refs = Refs};
  {name = Name, refs = Uses} = Refs[..];

}
