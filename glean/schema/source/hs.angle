# Copyright (c) Meta Platforms, Inc. and affiliates.

schema hs.3 {
import src

predicate ModuleName : string

type Namespace = enum { var_ | datacon | tyvar | tycon }

predicate UnitName : string

predicate Module:
  {
    name: ModuleName,
    unit: UnitName,
  }

predicate ModuleSource:
  {
    mod: Module,
    file: src.File,
  }

predicate SourceModule:
  {
    file: src.File,
    mod: Module,
  }
  stored { File, Mod } where ModuleSource { Mod, File }

predicate OccName:
  {
    name: string,
    namespace_: Namespace,
  }

type NameSort =
  {
    external: {} |
      # An exported entity, uniquely identified by its OccName and Module.
    internal: src.ByteSpan |
      # A local binder, e.g. bound by a pattern-match, let. or where,
      # or a non-exported entity. These are uniquely identified by
      # the OccName, Module and ByteSpan.
  }

# Name: a unique key for an entity
predicate Name:
  {
    occ: OccName,
    mod: Module,
    sort: NameSort,
  }

# Types

type TupleSort = enum { boxed | unboxed | constraint }

type TyConSort =
  {
    normal: {} |
    tuple: { arity: nat, sort: TupleSort } |
    sum: { arity: nat } |
    equality: {} |
  }

predicate TyCon:
  {
    name: Name,
    sort: TyConSort,
    promoted: bool,
  }

type ArgFlag =
  {
    invisible: Specificity |
    requird: {}
  }

type Specificity = enum { inferred | specified }

predicate LitType:
  {
    num: nat |
    str: string |
    chr: nat |
  }

type TypeArg =
  {
    visible: bool,
    ty: Type,
  }

type TyVar = string

# Type variables
#
# In HieType a type variable is a Name. But these are always internal
# names, and they don't have a binding SrcSpan so we can't use sort =
# { internal = { span = .. }}. I considered adding a new NameSort: {
# unique: string }, but we don't really want to index uniques (they're
# too non-deterministic). Interestingly, when a HieType is rendered,
# we convert to IfaceType and we use only the OccName of the tyvars,
# discarding the uniques. This is probably wrong, strictly speaking,
# because there could be name clashes, but using a string here leaves
# room to rename the tyvars to disambiguate later.

predicate Type:
  {
    tyvar: TyVar |
    app: { fun: Type, args_: [TypeArg] } |
    tyconapp: { tycon: TyCon, args_: [TypeArg] } |
    forall: { name: TyVar, kind: Type, flag: ArgFlag, inner: Type } |
    fun: { mult: Type, arg: Type, res: Type } |
    qual: { pred: Type, res: Type } |
    lit: LitType |
    cast: Type |
    coercion: {}
  }

# Declarations / definitions

type Declaration =
  {
    val: ValBind |
    typeFamily: TypeFamilyDecl |
    type_: TypeSynDecl |
    data: DataDecl |
    con: ConDecl |
    patSyn: PatSynDecl |
    class_: ClassDecl |
    method: MethodDecl |
    instance: InstanceDecl |
    patBind: PatBind |
    tyVarBind: TyVarBind |
    field: RecFieldDecl |
  }

predicate DeclarationOfName:
  {
    name: Name,
    decl: Declaration,
  }
  # maybe store this? Turns 12 lookups into 1 lookup.
  { N, { val = { name = N }}} |
  { N, { typeFamily = { name = N }}} |
  { N, { type_ = { name = N }}} |
  { N, { data = { name = N }}} |
  { N, { con = { name = N }}} |
  { N, { patSyn = { name = N }}} |
  { N, { class_ = { name = N }}} |
  { N, { method = { name = N }}} |
  { N, { instance = { name = N }}} |
  { N, { patBind = { name = N }}} |
  { N, { tyVarBind = { name = N }}} |
  { N, { field = { name = N }}}

predicate ValBind:
  {
    name: Name,
    ty: maybe Type,
    # fixity
    # location of signature
  }

predicate TypeFamilyDecl:
  {
    name: Name,
  }

predicate TypeSynDecl:
  {
    name: Name,
  }

predicate DataDecl:
  {
    name: Name,
    # constructors
  }

predicate ConDecl:
  {
    name: Name,
    # fields, etc.
  }

predicate PatSynDecl:
  {
    name: Name,
  }

predicate ClassDecl:
  {
    name: Name,
    # superclass constraints
    # methods
    # defaults
  }

predicate MethodDecl:
  {
    name: Name,
    # type
    # default decl
  }

predicate InstanceDecl:
  {
    name: Name,
    # class
    # parameters etc.
  }

predicate PatBind:
  {
    name: Name,
    ty: maybe Type,
  }

predicate TyVarBind:
  {
    name: Name,
  }

predicate RecFieldDecl:
  {
    name: Name,
    # type
  }

predicate DeclarationLocation:
  {
    name: Name,
    file: src.File,
    span: src.ByteSpan
  }

predicate ModuleDeclarations:
  {
    module: Module,
    names: set Name,
  }

# References

type RefSpan =
  {
    kind: RefKind,
    span: src.ByteSpan,
  }

# It's useful to be able to distinguish import/export refs from code refs,
# because e.g. dead code can still have import/export refs.
type RefKind = enum { importref | exportref | coderef }

predicate Reference:
  {
    name: Name,
    refs: [RefSpan],
  }

predicate FileXRefs :
  {
    file : src.File,
    refs : [Reference],
  }

predicate OccNameLowerCase:
  {
    nameLowerCase: string,
    occName: OccName,
  }
  stored { prim.toLower Str, N } where N = OccName { name = Str }

predicate NameRefs:
  {
    target: Name,
    file: src.File,
    uses: [RefSpan]
  } stored {Name, File, Uses} where
  FileXRefs {file = File, refs = Refs};
  {name = Name, refs = Uses} = Refs[..];

}
