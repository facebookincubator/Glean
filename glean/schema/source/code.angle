# Copyright (c) Facebook, Inc. and its affiliates.

schema code.24 {
import src.1
import code.buck.1
import code.cxx.4
import code.erlang.1
import code.fbthrift.1
import code.flow.2
import code.hack.4
import code.hs.2
import code.java.5
import code.kotlin.1
import code.lsif.2
import code.pp.1
import code.python.1
import code.scip.1
import code.thrift.5
import codemarkup.types.1

type Entity =
  {
    cxx : code.cxx.Entity |
    pp : code.pp.Entity |
    java : code.java.Entity |
    kotlin : code.kotlin.Entity |
    hs : code.hs.Entity |
    python : code.python.Entity |
    hack : code.hack.Entity |
    flow : code.flow.Entity |
    thrift : code.thrift.Entity |
    fbthrift : code.fbthrift.Entity |
    buck : code.buck.Entity |
    erlang : code.erlang.Entity |
    lsif : code.lsif.Entity |
    scip : code.scip.Entity |
  }

# language enum values for exactly the set of entity tags (including LSIF)
#
# n.b. flow => javascript, javascript is the user-facing language
#
type Language =
  enum {
    Cpp | PreProcessor | Java | Haskell | Python | Hack | JavaScript | Rust |
    Thrift | Buck | Erlang | FSharp | Go | Kotlin | OCaml | Scala | Swift |
    TypeScript
  }

# entity tag to language id
predicate EntityLanguage:
  {
    entity: Entity,
    language: Language
  }
  { Entity, Language } where
    ( { cxx = _ } = Entity; Cpp = Language ) |
    ( { pp = _ } = Entity; PreProcessor = Language ) |
    ( { java = _ } = Entity; Java = Language ) |
    ( { kotlin = _ } = Entity; Kotlin = Language ) |
    ( { hs = _ } = Entity; Haskell = Language ) |
    ( { python = _ } = Entity; Python = Language ) |
    ( { hack = _ } = Entity; Hack = Language ) |
    ( { flow = _ } = Entity; JavaScript = Language ) |
    ( { thrift = _ } = Entity; Thrift = Language ) |
    ( { fbthrift = _ } = Entity; Thrift = Language ) |
    ( { buck = _ } = Entity; Buck = Language ) |
    ( { erlang = _ } = Entity; Erlang = Language ) |
    ( { lsif = LSIF }  = Entity; EntityLanguageLSIF { LSIF, Language } ) |
    ( { scip = SCIP }  = Entity; EntityLanguageSCIP { SCIP, Language } );

# (private) helper for the LSIF subset
predicate EntityLanguageLSIF:
  {
    entity: code.lsif.Entity,
    language: Language
  }
  { LSIF, Language } where
    ( { erlang = _ } = LSIF; Erlang = Language ) |
    ( { fsharp = _ } = LSIF; FSharp = Language ) |
    ( { go = _ } = LSIF; Go = Language ) |
    ( { haskell = _ } = LSIF; Haskell = Language ) |
    ( { java = _ } = LSIF; Java = Language ) |
    ( { kotlin = _ } = LSIF; Kotlin = Language ) |
    ( { ocaml = _ } = LSIF; OCaml = Language ) |
    ( { python = _ } = LSIF; Python = Language ) |
    ( { scala = _ } = LSIF; Scala = Language ) |
    ( { swift = _ } = LSIF; Swift = Language ) |
    ( { typescript = _ } = LSIF; TypeScript = Language );

# (private) helper for the SCIP subset
predicate EntityLanguageSCIP:
  {
    entity: code.scip.Entity,
    language: Language
  }
  { SCIP, Language } where
    { rust = _ } = SCIP; Rust : Language = Language;

type Annotations =
  {
    cxx : code.cxx.Annotations |
    java : code.java.Annotations |
    python : code.python.Annotations |
    hack : code.hack.Annotations |
    thrift : code.thrift.Annotations |
    fbthrift : code.fbthrift.Annotations |
  }

type Argument =
  {
    lit: string |
    xref: Entity
  }

type CallArgument =
  { label : maybe string
  , span : src.ByteSpan
  , argument : maybe Argument
  }
}
