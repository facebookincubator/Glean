# Copyright (c) Facebook, Inc. and its affiliates.

schema codemarkup.cxx.3 {
import src.1
import code.cxx.4
import codemarkup.types.1
import cxx1.5

# Resolving locations to entities

# Resolve locations for all traces in a Cxx file
predicate CxxResolveLocation:
  {
    location: codemarkup.types.Location,
    entity: code.cxx.Entity,
  }
  { { Str, File, Range, Span }, Entity } where
    Trace = cxx1.Trace { file = File };
    CxxResolveTraceLocation { Trace, { Str, File, Range, Span }, Entity };

# Like FileEntityLocations but indexed by a specific Trace (for Cxx)
predicate CxxFileEntityTraceLocations:
  {
    file: src.File,
    trace: cxx1.Trace,
    location: codemarkup.types.Location,
    entity: code.cxx.Entity,
  }
  { File, Trace, Location, Entity } where
    CxxResolveTraceLocation { Trace, Location, Entity };
    codemarkup.types.Location { file = File } = Location;

# Resolve locations for Cxx, but for only a specific trace
# We'll need to pick the trace on the client
predicate CxxResolveTraceLocation:
  {
    trace : cxx1.Trace,
    location: codemarkup.types.Location,
    entity: code.cxx.Entity,
  }
  { Trace, Location, Entity } where
    Trace = cxx1.Trace { file = File, declarations = cxx1.Declarations Decls };
    # regular decls
    (
      Decl = Decls[..];
      cxx1.DeclarationLocationNameSpan { Decl, Range, Str, _, Span };
      Location = codemarkup.types.Location { Str, File, { range = Range }, { just = Span } };
      CxxResolveDeclarationToEntity { Decl, Entity };
    )

# For a given declaration, match to proper code.cxx.Entity. It will be
# a definition entity if the given declaration points to a definition.
predicate CxxResolveDeclarationToEntity:
  {
    decl: cxx1.Declaration,
    entity: code.cxx.Entity,
  }
  { Decl, Entity } where
    (
      { function_ = FunctionDecl } = Decl;
      FunctionDefn = cxx1.FunctionDefinition { declaration = FunctionDecl };
      { defn = { function_ = FunctionDefn } } = Entity;
    ) |
    (
      { record_ = RecordDecl } = Decl;
      RecordDefn = cxx1.RecordDefinition { declaration = RecordDecl };
      { defn = { record_ = RecordDefn } } = Entity;
    ) |
    (
      { enum_ = EnumDecl } = Decl;
      EnumDefn = cxx1.EnumDefinition { declaration = EnumDecl };
      { defn = { enum_ = EnumDefn } } = Entity;
    ) |
    (
      { namespace_ = NamespaceDecl } = Decl;
      NamespaceDefn = cxx1.NamespaceDefinition { declaration = NamespaceDecl };
      { defn = { namespace_ = NamespaceDefn } } = Entity;
    ) |
    (
      !({ function_ = FunctionDecl } = Decl; cxx1.FunctionDefinition { declaration = FunctionDecl });
      !({ record_ = RecordDecl } = Decl; cxx1.RecordDefinition { declaration = RecordDecl });
      !({ enum_ = EnumDecl } = Decl; cxx1.EnumDefinition { declaration = EnumDecl });
      !({ namespace_ = NamespaceDecl } = Decl; cxx1.NamespaceDefinition { declaration = NamespaceDecl });
      { decl = Decl } = Entity;
    )

# Finding entities' locations

predicate CxxEntityLocation:
  {
    entity: code.cxx.Entity,
    location: codemarkup.types.Location,
  }
  { { decl = D }, { Name, File, { range = Range }, { just = Span } } } where
    cxx1.DeclarationLocationNameSpan { D, Range, Name, _, Span };
    { file = File } = Range;

# Finding references in a file

# Either C++ / ObjC xrefs or C preprocessor xrefs
predicate CxxFileEntityXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.cxx.Entity,
  }
  { File, XRef, Entity } where
    CxxFileEntityFixedXRefLocations { File, XRef, Entity }

# Fixed C++ xrefs only
predicate CxxFileEntityFixedXRefLocations:
  {
    file: src.File,
    xref: codemarkup.types.XRefLocation,
    entity: code.cxx.Entity,
  }
  { File, XRef, Entity } where
    CxxFileEntityTraceFixedXRefLocations { File, _, XRef, Entity }

# Fixed C++ xrefs only, for a specific trace (FileXRefMap)
# (deprecated)
predicate CxxFileEntityTraceFixedXRefLocations:
  {
    file: src.File,
    trace: cxx1.FileXRefMap,
    xref: codemarkup.types.XRefLocation,
    entity: code.cxx.Entity,
  }
  { File, Trace, XRef, Entity } where
    cxx1.FileXRefMap { file = File, fixed = Fixeds } = Trace;
    cxx1.FileXRefs { Trace, _ };
    cxx1.FixedXRef { XRefTarget, Uses } = Fixeds[..];
    CxxXRefTargetLocation { XRefTarget, Entity, Location };
    Spans = prim.relToAbsByteSpans Uses;
    Span = Spans[..];
    { Location, { span = Span }} = XRef;

# Fixed C++ xrefs, keyed by a specific cxx1.FileXRefs fact
# We will expand any targets as best we can
predicate CxxFileEntityXMapFixedXRefLocations:
  {
    trace: cxx1.FileXRefs,
    xref: codemarkup.types.XRefLocation,
    entity: code.cxx.Entity,
  }
  { Trace, XRef, Entity } where
    cxx1.FileXRefs { xmap = { fixed = Fixeds } } = Trace;
    cxx1.FixedXRef { XRefTarget, Uses } = Fixeds[..];
    CxxXRefTargetLocation { XRefTarget, Entity, Location };
    Spans = prim.relToAbsByteSpans Uses;
    Span = Spans[..];
    { Location, { span = Span }} = XRef;

# Helper to (partially) process XRefTargets to entities and xrefs
predicate CxxXRefTargetLocation:
  {
    target: cxx1.XRefTarget,
    entity: code.cxx.Entity,
    location: codemarkup.types.Location,
  }
  { XRefTarget, Entity, Location } where
    # fixed declaration entities
    ( { declaration = Decl } = XRefTarget;
      cxx1.DeclarationLocationNameSpan { Decl, Range, Name, _, Span };
      { file = TargetFile } = Range;
      { Name, TargetFile, { range = Range }, { just = Span } } = Location;
      { decl = Decl } = Entity;
    ) | (
    # or jump through the decl sometimes to a def
      { declaration = Decl } = XRefTarget;
      CxxDeclToDefXRefTargetLocation { Decl, Entity, Location };
    ) | (
    # fixed enumerator entities
      { enumerator = Enum } = XRefTarget;
      { cxx1.Name Name, _, Range } = Enum;
      { file = TargetFile } = Range;
      { Name, TargetFile, { range = Range }, nothing } = Location;
      { enumerator = Enum } = Entity;
    )
    # objSelector -- not an entity type
    # unknown -- just a file and a point in the file tbd
    # indirect -- can't implement due to recursion

#
# Find xrefs associated with decls in this file / trace
#
# For decls, compute unique xrefs to defns
# For defns, compute unique xrefs to decls (decl families)
#
predicate CxxFileEntityTraceDeclToDefXRefLocations:
  {
    file: src.File,
    trace: cxx1.Trace,
    xref: codemarkup.types.XRefLocation,
    entity: code.cxx.Entity,
  }
  { File, Trace, XRef, Entity } where
    Trace = cxx1.Trace { File, cxx1.Declarations Decls, _ };
    Decl = Decls[..];
    # Get xrefs from decl to defn ,and defn back to decl family
    ({ Entity, Location } where
      CxxDeclToDefXRefTargetLocation { Decl, Entity, Location } |
      CxxDefToDeclFamilyXRefTargetLocation { Decl, Entity, Location }
    );
    cxx1.DeclarationNameSpan { Decl, _, Span };
    { Location, { span = Span }} = XRef;

# For a given Decl, it might have a base Defn, build an entity for that
# Iff the target is not the same as the source Decl
predicate CxxDeclToDefXRefTargetLocation:
  {
    decl: cxx1.Declaration,
    entity: code.cxx.Entity,
    location: codemarkup.types.Location
  }
  { Decl1, Entity, Location } where
    code.cxx.DeclToDef { Decl1, Defn };
    cxx1.DefToBaseDecl { Defn , Decl2 };
    Decl1 != Decl2; # Filter out (many) self refs
    cxx1.DeclarationLocationNameSpan { Decl2, Range, Name, _, Span };
    { file = TargetFile } = Range;
    { Name, TargetFile, { range = Range }, { just = Span } } = Location;
    { defn = Defn } = Entity;

# For a given Decl, find any DeclFamily entries
# We will turn these into xrefs
predicate CxxDefToDeclFamilyXRefTargetLocation:
  {
    decl: cxx1.Declaration,
    entity: code.cxx.Entity,
    location: codemarkup.types.Location,
  }
  { Decl1, Entity, Location } where
    cxx1.DeclFamilyOf { decl = Decl1, family = Decl2 };
    Decl1 != Decl2; # filter out many self-refs
    cxx1.DeclarationLocationNameSpan { Decl2, Range, Name, _, Span };
    { file = TargetFile } = Range;
    { Name, TargetFile, { range = Range }, { just = Span } } = Location;
    { decl = Decl2 } = Entity;

# "Variable" external XRefs only, for a specific trace (FileXRefMap)
# todo: we should really zip these in Angle and export them as XRefLocations
predicate CxxFileEntityTraceVariableXRefLocations:
  {
    file: src.File,
    trace: cxx1.FileXRefMap,
    spans: [src.ByteSpans], # n.b. relative bytespan array
    targets : [cxx1.XRefTarget],
  }
  { File, Trace, ByteSpanSpans, Targets } where
    cxx1.FileXRefMap { file = File, variable = ByteSpanSpans } = Trace;
    cxx1.FileXRefs { Trace, Targets };

# Bulk fetch any declaration locations associated with the xref targets
# Rather than O(n) calls to map over the external target xrefs,
# we can bulk-fetch all locations in one go, saving a lot of calls
# (deprecated)
predicate CxxFileEntityTraceVariableXRefDeclLocations:
  {
    trace: cxx1.FileXRefMap,
    source: cxx1.Declaration, # used to identify the source
    location: codemarkup.types.Location,
  }
  { Trace, Decl, Location } where
    cxx1.FileXRefs { Trace, Targets };
    { declaration = Decl } = Targets[..];
    cxx1.DeclarationLocationNameSpan { Decl, Range, Name, _, Span };
    { file = TargetFile } = Range;
    { Name, TargetFile, { range = Range }, { just = Span } } = Location;

# Bulk fetch any declaration locations associated with the xref targets
# Rather than O(n) calls to map over the external target xrefs,
# we can bulk-fetch all locations in one go, saving a lot of calls
predicate CxxFileEntityXMapVariableXRefDeclLocations:
  {
    trace: cxx1.FileXRefs,
    source: cxx1.Declaration, # used to identify the source
    location: codemarkup.types.Location,
  }
  { Trace, Decl, Location } where
    cxx1.FileXRefs { externals = Targets } = Trace;
    { declaration = Decl } = Targets[..];
    cxx1.DeclarationLocationNameSpan { Decl, Range, Name, _, Span };
    { file = TargetFile } = Range;
    { Name, TargetFile, { range = Range }, { just = Span } } = Location;

# Bulk fetch any definitions associated with the external decls in the trace
# (deprecated)
predicate CxxFileEntityTraceVariableXRefDeclToDefs:
  {
    trace: cxx1.FileXRefMap,
    source: cxx1.Declaration, # used to identify the source
    entity: code.cxx.Entity, # enough stuff to build a xreflocation
    location: codemarkup.types.Location,
  }
  { Trace, Decl, Entity, Location } where
    cxx1.FileXRefs { Trace, Targets };
    # decls
    # todo:  more cases: recursion: indirect xrefs could be decls too
    { declaration = Decl } = Targets[..];
    CxxDeclToDefXRefTargetLocation { Decl, Entity, Location };

# Bulk fetch any definitions associated with the external decls in the filexrefs
predicate CxxFileEntityXMapVariableXRefDeclToDefs:
  {
    trace: cxx1.FileXRefs,
    source: cxx1.Declaration, # used to identify the source
    entity: code.cxx.Entity, # enough stuff to build a xreflocation
    location: codemarkup.types.Location,
  }
  { Trace, Decl, Entity, Location } where
    cxx1.FileXRefs { externals = Targets } = Trace;
    # decls
    # todo:  more cases: recursion: indirect xrefs could be decls too
    { declaration = Decl } = Targets[..];
    CxxDeclToDefXRefTargetLocation { Decl, Entity, Location };

#
# Language entity uses
#

predicate CxxEntityUses:
  {
    target: code.cxx.Entity,
    file: src.File,
    span: src.ByteSpan,
  }
  ({ { decl = D }, File, Span } where
    cxx1.TargetUses { { declaration = D }, File, Uses };
    Spans = prim.relToAbsByteSpans Uses;
    Span = Spans[..]) |
  ({ { enumerator = E }, File, Span } where
    cxx1.TargetUses { { enumerator = E }, File, Uses };
    Spans = prim.relToAbsByteSpans Uses;
    Span = Spans[..])

#
# Language-specific symbol info
#

predicate CxxEntityKind:
  {
    entity: code.cxx.Entity,
    kind: codemarkup.types.SymbolKind,
  }
  { CxxD, Kind } where
    ({ decl = Decl } = CxxD;
     CxxDeclKind { Decl, Kind }) |
    ({ enumerator = _ } = CxxD; Enumerator = Kind) |
    ({ defn = Defn } = CxxD;
     cxx1.DefToBaseDecl { Defn, Decl };
     CxxDeclKind { Decl, Kind } )

predicate CxxDeclKind:
  {
    decl: cxx1.Declaration,
    kind: codemarkup.types.SymbolKind,
  }
  { Decl, Kind } where
    ({ function_ = { method = MM } } = Decl;
       ({ just = _ } = MM; Method = Kind) |
       (nothing = MM; Function = Kind)
    ) |
    (
      ({ enum_ = _ } = Decl; Enum = Kind ) |
      ({ namespace_ = _ } = Decl; Namespace = Kind ) |
      ({ objcMethod = _ } = Decl; Method = Kind ) |
      ({ objcProperty = _ } = Decl; Property = Kind ) |
      ({ typeAlias = _ } = Decl; Class_ = Kind ) |
      ({ usingDeclaration = _ } = Decl; Namespace = Kind ) |
      ({ variable = _ } = Decl; Variable = Kind ) |
      # TODO: objc containers, using directives
      ({ record_ = R } = Decl;
        ({ kind = { struct_ = _ } } = R; Struct = Kind ) |
        ({ kind = { class_ = _ } } = R; Class_ = Kind ) |
        ({ kind = { union_ = _ } } = R; Union = Kind )
      )
    )

predicate CxxEntityInfo:
  {
    entity: code.cxx.Entity,
    info: codemarkup.types.SymbolInfo,
  }
  { CxxD, Info } where
    ({ decl = Decl } = CxxD;
     CxxDeclInfo { Decl, Info }) |
    ({ enumerator = _ } = CxxD;
     { kind = Enumerator, isAbstract = false } = Info) |
    ({ defn = Defn } = CxxD;
     cxx1.DefToBaseDecl { Defn, Decl };
     CxxDeclInfo { Decl, Info }; )

predicate CxxDeclInfo:
  {
    decl: cxx1.Declaration,
    info: codemarkup.types.SymbolInfo,
  }
  { Decl, { kind = Kind, isAbstract = Abs } } where
    CxxDeclKind { decl = Decl, kind = Kind };
    if (Method = Kind) then (
      ({ function_ = { method = { just = M }}} = Decl;
         { isVirtual = Abs } = M
      ) |
      (
        { objcMethod = _ } = Decl;
        false = Abs;
      )
    ) else (
      false = Abs
    )

#
# Annotations
#

predicate CxxAnnotation :
  {
    entity: code.cxx.Entity,
    anns: code.cxx.Annotations,
  }
  {{decl=D}, {attributes=As}} where
    ({ function_ = Decl } = D; cxx1.FunctionAttribute{declaration=Decl, attr=A}; As=[A]) |
    ({ function_ = Decl } = D; !cxx1.FunctionAttribute{declaration=Decl}; As=[]:[cxx1.Attribute])

#
# Visibility
#

predicate CxxVisibility:
  {
    entity: code.cxx.Entity,
    visibility: codemarkup.types.Visibility,
  }
  { {decl=Decl}, Access } where
    (
      ({ function_ = {name={scope=Scope} } } = Decl) |
      ({ enum_ = {name={scope=Scope} } } = Decl) |
      ({ record_ = {name={scope=Scope} } } = Decl)
    );
    ({recordWithAccess={access=Access}}=Scope;{}:{})

#
# Relations
#

predicate CxxContainsChildEntity :
  {
    parent: code.cxx.Entity,
    child: code.cxx.Entity
  }
  { { decl = Container }, Member } where
    (
      { namespace_ = Decl } = Container;
      { name = NQN } = Decl;
      Scope = cxx1.Scope {namespace_ = NQN};
      Member = (
        (
          Q = cxx1.QName { scope = Scope };
          (
            code.cxx.Entity { decl = { record_ = { name = Q }}}  |
            code.cxx.Entity { decl = { variable = { name = Q }}} |
            code.cxx.Entity { decl = { typeAlias = { name = Q }}} |
            code.cxx.Entity { decl = { enum_ = { name = Q }}}
          )
        ) | (
          D = cxx1.FunctionDeclaration { name = { scope = Scope } };
          code.cxx.Entity { decl = { function_ = D } }
        ) | (
          D = cxx1.NamespaceDeclaration { name = { parent = { just = NQN } } };
          code.cxx.Entity { decl = { namespace_ = D } }
        )
      )
    ) |
    (
      (
        (
          { record_ = Decl } = Container;
          cxx1.RecordDefinition { declaration = Decl, members = cxx1.Declarations Members }
        ) |
        (
          { objcContainer = Decl } = Container;
          cxx1.ObjcContainerDefinition { declaration = Decl, members = cxx1.Declarations Members }
        )
      );
      Member = code.cxx.Entity {decl = Members[..]}
    )

}

schema codemarkup.cxx.3 evolves codemarkup.cxx.2
