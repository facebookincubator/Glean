# Copyright (c) Meta, Inc. and its affiliates.

schema lsif.1 {

import src.1

# Indexer tool metadata
type ToolInfo =
  {
    toolName: string,
    toolArgs: [string],
    version: maybe string,
  }

# Tags for entities, so clients can distinguish them.
# Exactly from https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#symbolKind
# should match exactly LSIF.JSON.SymbolKind
#
# Note: this is not the same as codemarkup.SymbolKind's enum
#
type SymbolKind =
  enum {
    File | Module | Namespace | Package | Class_ | Method | Property |
    Field | Constructor | Enum | Interface | Function | Variable | Constant | String |
    Number | Boolean | Array | Object_ | Key | Null | EnumMember | Struct | Event |
    Operator | TypeParameter | Unknown
  }

# Language Identifiers
# from https://microsoft.github.io/language-server-protocol/specifications/lsp/3.17/specification/#textDocumentItem
# Text documents have a text language identifier associated with filenames, to
# identify a document on the server side when it handles more than one language
# to avoid re-interpreting the file extension
type LanguageId =
  enum {
    ABAP | WindowsBat | BibTeX | Clojure | Coffeescript | C | Cpp | CSharp |
    CSS | Diff | Dart | Dockerfile | Elixir | Erlang | FSharp | Git | Go |
    Groovy | Handlebars | Haskell | HTML | Ini | Java | JavaScript |
    JavaScriptReact | JSON | LaTeX | Less | Lua | Makefile | Markdown |
    ObjectiveC | ObjectiveCpp | Perl | Perl6 | PHP | Powershell | Pug | Python |
    R | Razor | Ruby | Rust | SCSS | Scala | ShaderLab | Shell | SQL | Swift |
    TypeScript | TypeScriptReact | TeX | VisualBasic | XML | XSL | YAML |
    UnknownLanguage |
  }

# Opaque identifiers
predicate Name: string

# LSIF documents
predicate Document:
  {
    file : src.File,
    language : lsif.LanguageId
  }

predicate Metadata:
  {
    lsifVersion: string,
    projectRoot: src.File,
    positionEncoding: string,
    toolInfo: maybe ToolInfo,
  }

predicate PackageInformation:
  {
    name: string,
    manager: string,
    version: string
  }

predicate Project:
  {
    kind: lsif.LanguageId
  }

# Note, in LSIF range spans are not keyed by file
# having this as a type compresses better than as a predicate
# Note: These are 0-based, unlike src.Range.
type RangeSpan =
  {
    lineBegin : nat,
    columnBegin : nat,
    lineEnd : nat,
    columnEnd : nat,
  }

# LSIF ranges. Raw range facts. They correspond to navigation targets
predicate Range:
  {
    range: lsif.RangeSpan,
    fullRange: maybe lsif.RangeSpan,
    text: maybe lsif.Name
  }

# an edge item where the out vertex is a "definitionResult"
predicate FileDefinitions:
  {
    file : src.File,
    range: [lsif.Range],
  }

type XRefLocation =
  {
    file: src.File,
    range: lsif.Range
  }

# a reference span in file , pointing to target definition xref location
predicate FileReferences:
  {
    file : src.File,
    range: lsif.Range,
    target: lsif.XRefLocation
  }

}
