"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8481],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>s,MDXProvider:()=>p,mdx:()=>y,useMDXComponents:()=>d,withMDXComponents:()=>u});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(){return o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e},o.apply(this,arguments)}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),u=function(e){return function(t){var n=d(t.components);return a.createElement(e,o({},t,{components:n}))}},d=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},p=function(e){var t=d(e.components);return a.createElement(s.Provider,{value:t},e.children)},f="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),u=d(n),p=r,f=u["".concat(i,".").concat(p)]||u[p]||m[p]||o;return n?a.createElement(f,c(c({ref:t},s),{},{components:n})):a.createElement(f,c({ref:t},s))}));function y(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[f]="string"==typeof e?e:r,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},93866:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var a=n(58168),r=(n(96540),n(15680));n(14423);const o={id:"advanced",title:"Advanced Query Features",sidebar_label:"Advanced Query Features"},i=void 0,c={unversionedId:"angle/advanced",id:"angle/advanced",title:"Advanced Query Features",description:"Types and signatures",source:"@site/docs/angle/advanced.md",sourceDirName:"angle",slug:"/angle/advanced",permalink:"/docs/angle/advanced",draft:!1,editUrl:"https://github.com/facebookincubator/Glean/tree/main/glean/website/docs/angle/advanced.md",tags:[],version:"current",frontMatter:{id:"advanced",title:"Advanced Query Features",sidebar_label:"Advanced Query Features"},sidebar:"someSidebar",previous:{title:"Query Efficiency",permalink:"/docs/angle/efficiency"},next:{title:"Debugging",permalink:"/docs/angle/debugging"}},l={},s=[{value:"Types and signatures",id:"types-and-signatures",level:2},{value:"Explicit fact IDs",id:"explicit-fact-ids",level:2},{value:"Functional predicates",id:"functional-predicates",level:2}],u={toc:s},d="wrapper";function p(e){let{components:t,...n}=e;return(0,r.mdx)(d,(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.mdx)("h2",{id:"types-and-signatures"},"Types and signatures"),(0,r.mdx)("p",null,"Angle queries are ",(0,r.mdx)("em",{parentName:"p"},"strongly typed"),": the server will check your query for type-safety before executing it. Type-checking ensures that the query makes sense; that it's not trying to pattern-match strings against integers, or look for a field in a record that doesn't exist for example."),(0,r.mdx)("p",null,"Angle's type-checker isn't very clever, though. It mostly doesn't do type ",(0,r.mdx)("em",{parentName:"p"},"inference"),", it checks that expressions have the intended type. When it doesn't know the intended type of an expression, it uses a dumb inference mode that can only infer the type when it's really obvious: like a fact match, or a string."),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> P where C = { name = "Fish" }; example.Parent { C, P }\ncan\'t infer the type of: {name = "Fish"}\n    try adding a type annotation like ({name = "Fish"} : T)\n    or reverse the statement (Q = P instead of P = Q)\n')),(0,r.mdx)("p",null,"In cases like this, Angle's type-checker needs a bit of help. We can use a ",(0,r.mdx)("em",{parentName:"p"},"type signature")," to supply more information about the type:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> P where C = { name = "Fish" } : example.Class; example.Parent { C, P }\n{ "id": 1024, "key": { "name": "Pet", "line": 10 } }\n')),(0,r.mdx)("p",null,"Here we used ",(0,r.mdx)("inlineCode",{parentName:"p"},'{ name = "Fish" } : example.Class'),' to tell Angle the expected type of the pattern. You should read the colon as "has type", and the type can be any valid Angle type, for details see ',(0,r.mdx)("a",{parentName:"p",href:"/docs/schema/types"},"Built-in types"),"."),(0,r.mdx)("h2",{id:"explicit-fact-ids"},"Explicit fact IDs"),(0,r.mdx)("p",null,"Every fact has an ID, which is a 64-bit integer that uniquely identifies the fact in a particular database. You've probably noticed these fact IDs in the query results: every result has an ",(0,r.mdx)("inlineCode",{parentName:"p"},"id")," field with the fact ID, and a ",(0,r.mdx)("inlineCode",{parentName:"p"},"key")," field with the fact key."),(0,r.mdx)("p",null,"Most Angle queries don't need to mention fact IDs explicitly, but sometimes it's useful. For example, you might need to perform a query to fetch some results, do some custom filtering on the results and then query Glean again using some of the fact IDs from the first query."),(0,r.mdx)("p",null,"WARNING: a fact ID only makes sense in the context of a particular database, so make sure that your query that mentions fact IDs is being made on the same database that you obtained the fact ID from originally."),(0,r.mdx)("p",null,"Glean has a syntax for referring to fact IDs directly; for example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> $1026 : example.Class\n{ "id": 1026, "key": { "name": "Fish", "line": 30 } }\n')),(0,r.mdx)("p",null,"the syntax is ",(0,r.mdx)("inlineCode",{parentName:"p"},"$<fact ID>"),", but you will often want to use it with a ",(0,r.mdx)("a",{parentName:"p",href:"#types-and-signatures"},"type signature"),", as ",(0,r.mdx)("inlineCode",{parentName:"p"},"$<fact ID> : <predicate>"),"."),(0,r.mdx)("p",null,"If you get the predicate wrong, Glean will complain:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},"facts> $1026 : example.Parent\n*** Exception: fact has the wrong type\n")),(0,r.mdx)("p",null,"The type can be omitted only if it is clear from the context, for example"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> example.Parent { child = $1026 }\n{ "id": 1029, "key": { "child": { "id": 1026 }, "parent": { "id": 1024 } } }\n')),(0,r.mdx)("p",null,"Sometimes you might want to use multiple fact IDs in a query. Choice (",(0,r.mdx)("inlineCode",{parentName:"p"},"|"),") comes in handy here:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},"facts> example.Parent { child = $1026 | $1027 }\n")),(0,r.mdx)("h2",{id:"functional-predicates"},"Functional predicates"),(0,r.mdx)("p",null,"All the predicates we've seen so far have been key-only predicates. A predicate can also have a ",(0,r.mdx)("em",{parentName:"p"},"value"),"; we call these ",(0,r.mdx)("em",{parentName:"p"},"functional predicates")," or ",(0,r.mdx)("em",{parentName:"p"},"key-value predicates"),"."),(0,r.mdx)("p",null,"For example, we might model a reference to a class in our example schema like this:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},"predicate Reference :\n  { file : string, line : nat, column : nat } -> Class\n")),(0,r.mdx)("p",null,"This says that for a given (file,line,column) there can be at most one reference to a Class.  This uniqueness is the important property of a key-value predicate: for each key there is at most one value."),(0,r.mdx)("p",null,"We query for key-value predicates using this syntax:"),(0,r.mdx)("pre",null,(0,r.mdx)("code",{parentName:"pre",className:"language-lang=angle"},'facts> C where example.Reference { file = "x", line = 1, column = 2 } -> C\n')),(0,r.mdx)("p",null,"The pattern after the ",(0,r.mdx)("inlineCode",{parentName:"p"},"->")," matches the value. It can be an arbitrary pattern, just like the key. Note that facts cannot be efficiently searched by value, so the pattern that matches the value is a filter only."))}p.isMDXComponent=!0},80510:function(e,t,n){var a=this&&this.__awaiter||function(e,t,n,a){return new(n||(n=Promise))((function(r,o){function i(e){try{l(a.next(e))}catch(t){o(t)}}function c(e){try{l(a.throw(e))}catch(t){o(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}l((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getSpecInfo=void 0;const r=n(88266);t.getSpecInfo=function(e){return a(this,void 0,void 0,(function*(){return yield r.call({module:"bloks",api:"getSpecInfo",args:{styleId:e}})}))}},88266:function(e,t){var n=this&&this.__awaiter||function(e,t,n,a){return new(n||(n=Promise))((function(r,o){function i(e){try{l(a.next(e))}catch(t){o(t)}}function c(e){try{l(a.throw(e))}catch(t){o(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}l((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.call=void 0;let a=!1,r=0;const o={};t.call=function(e){return n(this,void 0,void 0,(function*(){if("staticdocs.thefacebook.com"!==window.location.hostname&&"localhost"!==window.location.hostname)return Promise.reject(new Error("Not running on static docs"));a||(a=!0,window.addEventListener("message",(e=>{if("static-docs-bridge-response"!==e.data.event)return;const t=e.data.id;t in o||console.error(`Recieved response for id: ${t} with no matching receiver`),"response"in e.data?o[t].resolve(e.data.response):o[t].reject(new Error(e.data.error)),delete o[t]})));const t=r++,n=new Promise(((e,n)=>{o[t]={resolve:e,reject:n}})),i={event:"static-docs-bridge-call",id:t,module:e.module,api:e.api,args:e.args},c="localhost"===window.location.hostname?"*":"https://www.internalfb.com";return window.parent.postMessage(i,c),n}))}},70680:function(e,t,n){var a=this&&this.__awaiter||function(e,t,n,a){return new(n||(n=Promise))((function(r,o){function i(e){try{l(a.next(e))}catch(t){o(t)}}function c(e){try{l(a.throw(e))}catch(t){o(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}l((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.reportFeatureUsage=t.reportContentCopied=void 0;const r=n(88266);t.reportContentCopied=function(e){return a(this,void 0,void 0,(function*(){const{textContent:t}=e;try{yield r.call({module:"feedback",api:"reportContentCopied",args:{textContent:t}})}catch(n){}}))},t.reportFeatureUsage=function(e){return a(this,void 0,void 0,(function*(){const{featureName:t,id:n}=e;console.log("used feature");try{yield r.call({module:"feedback",api:"reportFeatureUsage",args:{featureName:t,id:n}})}catch(a){}}))}},14423:function(e,t,n){var a=this&&this.__createBinding||(Object.create?function(e,t,n,a){void 0===a&&(a=n),Object.defineProperty(e,a,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,a){void 0===a&&(a=n),e[a]=t[n]}),r=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),o=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&a(t,e,n);return r(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OssOnly=t.FbInternalOnly=t.getEphemeralDiffNumber=t.hasEphemeralDiffNumber=t.isInternal=t.validateFbContentArgs=t.fbInternalOnly=t.fbContent=t.inpageeditor=t.feedback=t.uidocs=t.bloks=void 0,t.bloks=o(n(80510)),t.uidocs=o(n(3730)),t.feedback=o(n(70680)),t.inpageeditor=o(n(45458));const i=["internal","external"];function c(e){return s(e),u()?"internal"in e?l(e.internal):[]:"external"in e?l(e.external):[]}function l(e){return"function"==typeof e?e():e}function s(e){if("object"!=typeof e)throw new Error(`fbContent() args must be an object containing keys: ${i}. Instead got ${e}`);if(!Object.keys(e).find((e=>i.find((t=>t===e)))))throw new Error(`No valid args found in ${JSON.stringify(e)}. Accepted keys: ${i}`);const t=Object.keys(e).filter((e=>!i.find((t=>t===e))));if(t.length>0)throw new Error(`Unexpected keys ${t} found in fbContent() args. Accepted keys: ${i}`)}function u(){try{return Boolean(!1)}catch(e){return console.log("process.env.FB_INTERNAL couldn't be read, maybe you forgot to add the required webpack EnvironmentPlugin config?",e),!1}}function d(){try{return null}catch(e){return console.log("process.env.PHABRICATOR_DIFF_NUMBER couldn't be read, maybe you forgot to add the required webpack EnvironmentPlugin config?",e),null}}t.fbContent=c,t.fbInternalOnly=function(e){return c({internal:e})},t.validateFbContentArgs=s,t.isInternal=u,t.hasEphemeralDiffNumber=function(){return Boolean(d())},t.getEphemeralDiffNumber=d,t.FbInternalOnly=function(e){return u()?e.children:null},t.OssOnly=function(e){return u()?null:e.children}},45458:function(e,t,n){var a=this&&this.__awaiter||function(e,t,n,a){return new(n||(n=Promise))((function(r,o){function i(e){try{l(a.next(e))}catch(t){o(t)}}function c(e){try{l(a.throw(e))}catch(t){o(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}l((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.submitDiff=void 0;const r=n(88266);t.submitDiff=function(e){return a(this,void 0,void 0,(function*(){const{file_path:t,new_content:n,project_name:a,diff_number:o}=e;try{return yield r.call({module:"inpageeditor",api:"createPhabricatorDiffApi",args:{file_path:t,new_content:n,project_name:a,diff_number:o}})}catch(i){throw new Error(`Error occurred while trying to submit diff. Stack trace: ${i}`)}}))}},3730:function(e,t,n){var a=this&&this.__awaiter||function(e,t,n,a){return new(n||(n=Promise))((function(r,o){function i(e){try{l(a.next(e))}catch(t){o(t)}}function c(e){try{l(a.throw(e))}catch(t){o(t)}}function l(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(i,c)}l((a=a.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getApi=t.docsets=void 0;const r=n(88266);t.docsets={BLOKS_CORE:"887372105406659"},t.getApi=function(e){return a(this,void 0,void 0,(function*(){const{name:t,framework:n,docset:a}=e;return yield r.call({module:"uidocs",api:"getApi",args:{name:t,framework:n,docset:a}})}))}}}]);