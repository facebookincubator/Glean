"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[76],{15680:(e,t,n)=>{n.r(t),n.d(t,{MDXContext:()=>c,MDXProvider:()=>m,mdx:()=>y,useMDXComponents:()=>u,withMDXComponents:()=>d});var r=n(96540);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(){return i=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)Object.prototype.hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(this,arguments)}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)n=i[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),d=function(e){return function(t){var n=u(t.components);return r.createElement(e,i({},t,{components:n}))}},u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},m=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},p="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},f=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,i=e.originalType,o=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(n),m=a,p=d["".concat(o,".").concat(m)]||d[m]||h[m]||i;return n?r.createElement(p,l(l({ref:t},c),{},{components:n})):r.createElement(p,l({ref:t},c))}));function y(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=n.length,o=new Array(i);o[0]=f;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:a,o[1]=l;for(var c=2;c<i;c++)o[c]=n[c];return r.createElement.apply(null,o)}return r.createElement.apply(null,n)}f.displayName="MDXCreateElement"},67555:(e,t,n)=>{n.d(t,{D4:()=>o,Lw:()=>l,gD:()=>s});var r=n(96540),a=n(14423);let i;function o(e){return r.createElement("a",{href:i+e.file},e.file)}function l(e){return r.createElement("a",{href:i+e.file},e.children)}i=(0,a.isInternal)()?"https://www.internalfb.com/code/fbsource/fbcode/":"https://github.com/facebookincubator/Glean/tree/master/";const s=e=>{let{children:t,internal:n,external:i}=e;return(0,a.fbContent)({internal:r.createElement("code",null,n),external:r.createElement("code",null,i)})}},51396:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>o,default:()=>m,frontMatter:()=>i,metadata:()=>l,toc:()=>c});var r=n(58168),a=(n(96540),n(15680));n(67555);const i={id:"design",title:"Schema Design",sidebar_label:"Design"},o=void 0,l={unversionedId:"schema/design",id:"schema/design",title:"Schema Design",description:"There are usually multiple ways to design a schema, and which one is",source:"@site/docs/schema/design.md",sourceDirName:"schema",slug:"/schema/design",permalink:"/docs/schema/design",draft:!1,editUrl:"https://github.com/facebookincubator/Glean/tree/main/glean/website/docs/schema/design.md",tags:[],version:"current",frontMatter:{id:"design",title:"Schema Design",sidebar_label:"Design"},sidebar:"someSidebar",previous:{title:"Thrift and JSON",permalink:"/docs/schema/thrift"},next:{title:"Overview",permalink:"/docs/query/intro"}},s={},c=[{value:"Should we reference predicates directly?",id:"should-we-reference-predicates-directly",level:2},{value:"Use key-value predicates",id:"use-key-value-predicates",level:2},{value:"Using arrays",id:"using-arrays",level:2},{value:"Increase sharing",id:"increase-sharing",level:2},{value:"How to experiment with schema design",id:"how-to-experiment-with-schema-design",level:2}],d={toc:c},u="wrapper";function m(e){let{components:t,...n}=e;return(0,a.mdx)(u,(0,r.A)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,a.mdx)("p",null,"There are usually multiple ways to design a schema, and which one is\nbest will depend on multiple factors. Specifically, we usually want to\nrepresent data so that it"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},"can be stored compactly,"),(0,a.mdx)("li",{parentName:"ul"},"is convenient to generate,"),(0,a.mdx)("li",{parentName:"ul"},"is convenient and efficient to query,"),(0,a.mdx)("li",{parentName:"ul"},"and it supports incremental indexing.")),(0,a.mdx)("p",null,"In the following sections we'll go through some of the common choices\nthat you'll encounter when designing a schema and offer some advice."),(0,a.mdx)("p",null,"Note: here we're only concerned with stored facts. The considerations\nhere don't apply to ",(0,a.mdx)("a",{parentName:"p",href:"../../derived/#on-demand-derived-predicates"},"On-demand derived predicates"),", because they aren't stored."),(0,a.mdx)("h2",{id:"should-we-reference-predicates-directly"},"Should we reference predicates directly?"),(0,a.mdx)("p",null,"For example, you could write a predicate for a class like this: ",(0,a.mdx)("strong",{parentName:"p"},"(1)")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"predicate Class :\n  {\n    name : string,\n    methods : [Method]\n  }\n")),(0,a.mdx)("p",null,"or like this: ",(0,a.mdx)("strong",{parentName:"p"},"(2)")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"predicate Class :\n  {\n    name : string,\n  }\n\npredicate ClassMethod :\n  {\n    class_ : Class,\n    method : Method\n  }\n")),(0,a.mdx)("p",null,"Which of these is best?"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Functionality")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"(1) retains the order of the methods, which might be\nimportant. Otherwise they're equivalent."),(0,a.mdx)("li",{parentName:"ul"},"With (1) we have to know the methods when we generate the ",(0,a.mdx)("inlineCode",{parentName:"li"},"Class"),"\nfact, whereas with (2) we can generate the facts about the methods\nseparately and in any order. This might not matter much with\nsomething small like a class definition, but for larger facts\n(e.g. the definitions of a file) it could be important."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Data representation")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"(1) has fewer facts per class, so is more compact (see ",(0,a.mdx)("a",{parentName:"li",href:"#using-arrays"},"Using Arrays")," below)."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Query performance")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"it's faster to fetch the methods of a class with\n(1), because (2) requires searching two predicates."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Incrementality")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"with (1), changing one method requires changing the\nwhole ",(0,a.mdx)("inlineCode",{parentName:"li"},"Class")," fact, which might force changes to other facts. With\n(2) we would only need to replace the ",(0,a.mdx)("inlineCode",{parentName:"li"},"ClassToMethod")," fact.")))),(0,a.mdx)("h2",{id:"use-key-value-predicates"},"Use key-value predicates"),(0,a.mdx)("p",null,"We often have a choice between using key-only or key-value (also known as ",(0,a.mdx)("a",{parentName:"p",href:"../../angle/advanced#functional-predicates"},"Functional predicates"),"): ",(0,a.mdx)("strong",{parentName:"p"},"(1)")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"predicate FunctionType : { function : Function, type_ : Type }\n")),(0,a.mdx)("p",null,"and: ",(0,a.mdx)("strong",{parentName:"p"},"(2)")),(0,a.mdx)("pre",null,(0,a.mdx)("code",{parentName:"pre"},"predicate FunctionType : Function -> Type\n")),(0,a.mdx)("p",null,"There are several tradeoffs here:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Functionality")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"(1) is a relation, whereas (2) is a function. In practical terms,\nwith (1) you can have many types for the same function, but with\n(2) that is an error (Glean will complain if you try to\ninsert two facts with the same key and different values)."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Data representation")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"(2) is much more efficient to store. In particular the value is\nstored only once. If the value (",(0,a.mdx)("inlineCode",{parentName:"li"},"Type")," in the above example) is large,\nyou should strongly consider using a key-value predicate."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Query performance")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"Both (1) and (2) support efficient querying by the key (",(0,a.mdx)("inlineCode",{parentName:"li"},"Function"),"\nin the example), and they both support slow filtering by the value\n(",(0,a.mdx)("inlineCode",{parentName:"li"},"Type"),")."))),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},(0,a.mdx)("strong",{parentName:"p"},"Incrementality")),(0,a.mdx)("ul",{parentName:"li"},(0,a.mdx)("li",{parentName:"ul"},"These two alternatives are equivalent with respect to incrementality.")))),(0,a.mdx)("h2",{id:"using-arrays"},"Using arrays"),(0,a.mdx)("p",null,"If you're choosing between arrays and separate facts, then consider:"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},"Arrays are ordered lists, whereas facts are just sets. If the order\nof your items is important - because you're representing something\nthat has an order, such as function arguments - then an array is the\nright choice.  (someday Glean might have a \"set\" type, but it\ncurrently doesn't).")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},"Conversely, if the order is ",(0,a.mdx)("em",{parentName:"p"},"not")," important, then using an array is\na poor choice because you will be forced to choose an order when\ngenerating your data. If you don't have a deterministic way to pick\nthe order, then your data representation is non-deterministic which\nleads to spurious differences in things like test outputs, which can\nbe annoying.")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},"Arrays are much more compact than multiple facts. There can be a\nhuge difference in storage overhead; it's worth measuring this for\nyour schema.")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},"When a client fetches an array as part of the result of a query,\nthey will get the whole array. If your array is large, that may be a\nlot of data to send over the wire, and it might even result in an\nallocation limit error on the server, preventing the client from\nfetching the data at all. Facts tend to support incremental querying\nbetter compared with arrays.")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},"Facts with large arrays are also slower to search through in a query\nthan smaller facts."))),(0,a.mdx)("h2",{id:"increase-sharing"},"Increase sharing"),(0,a.mdx)("p",null,"If there is duplication in the data stored in our facts, we can often\nextract the common data into a predicate to increase sharing. One\nexample of this was described in ",(0,a.mdx)("a",{parentName:"p",href:"/docs/schema/syntax#what-is-the-difference-between-a-predicate-and-a-type"},"What is the difference between a predicate and a type?"),"."),(0,a.mdx)("h2",{id:"how-to-experiment-with-schema-design"},"How to experiment with schema design"),(0,a.mdx)("ul",null,(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},"Generate some data and see how large it is, using ",(0,a.mdx)("inlineCode",{parentName:"p"},":stat")," in the shell.")),(0,a.mdx)("li",{parentName:"ul"},(0,a.mdx)("p",{parentName:"li"},"Write some example queries against your data, and check how much\nsearching they do using ",(0,a.mdx)("inlineCode",{parentName:"p"},":profile")," in the shell (see ",(0,a.mdx)("a",{parentName:"p",href:"/docs/angle/debugging"},"Query\nDebugging"),")."))))}m.isMDXComponent=!0},80510:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(t){i(t)}}function l(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getSpecInfo=void 0;const a=n(88266);t.getSpecInfo=function(e){return r(this,void 0,void 0,(function*(){return yield a.call({module:"bloks",api:"getSpecInfo",args:{styleId:e}})}))}},88266:function(e,t){var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(t){i(t)}}function l(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.call=void 0;let r=!1,a=0;const i={};t.call=function(e){return n(this,void 0,void 0,(function*(){if("staticdocs.thefacebook.com"!==window.location.hostname&&"localhost"!==window.location.hostname)return Promise.reject(new Error("Not running on static docs"));r||(r=!0,window.addEventListener("message",(e=>{if("static-docs-bridge-response"!==e.data.event)return;const t=e.data.id;t in i||console.error(`Recieved response for id: ${t} with no matching receiver`),"response"in e.data?i[t].resolve(e.data.response):i[t].reject(new Error(e.data.error)),delete i[t]})));const t=a++,n=new Promise(((e,n)=>{i[t]={resolve:e,reject:n}})),o={event:"static-docs-bridge-call",id:t,module:e.module,api:e.api,args:e.args},l="localhost"===window.location.hostname?"*":"https://www.internalfb.com";return window.parent.postMessage(o,l),n}))}},70680:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(t){i(t)}}function l(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.reportFeatureUsage=t.reportContentCopied=void 0;const a=n(88266);t.reportContentCopied=function(e){return r(this,void 0,void 0,(function*(){const{textContent:t}=e;try{yield a.call({module:"feedback",api:"reportContentCopied",args:{textContent:t}})}catch(n){}}))},t.reportFeatureUsage=function(e){return r(this,void 0,void 0,(function*(){const{featureName:t,id:n}=e;console.log("used feature");try{yield a.call({module:"feedback",api:"reportFeatureUsage",args:{featureName:t,id:n}})}catch(r){}}))}},14423:function(e,t,n){var r=this&&this.__createBinding||(Object.create?function(e,t,n,r){void 0===r&&(r=n),Object.defineProperty(e,r,{enumerable:!0,get:function(){return t[n]}})}:function(e,t,n,r){void 0===r&&(r=n),e[r]=t[n]}),a=this&&this.__setModuleDefault||(Object.create?function(e,t){Object.defineProperty(e,"default",{enumerable:!0,value:t})}:function(e,t){e.default=t}),i=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)"default"!==n&&Object.prototype.hasOwnProperty.call(e,n)&&r(t,e,n);return a(t,e),t};Object.defineProperty(t,"__esModule",{value:!0}),t.OssOnly=t.FbInternalOnly=t.getEphemeralDiffNumber=t.hasEphemeralDiffNumber=t.isInternal=t.validateFbContentArgs=t.fbInternalOnly=t.fbContent=t.inpageeditor=t.feedback=t.uidocs=t.bloks=void 0,t.bloks=i(n(80510)),t.uidocs=i(n(3730)),t.feedback=i(n(70680)),t.inpageeditor=i(n(45458));const o=["internal","external"];function l(e){return c(e),d()?"internal"in e?s(e.internal):[]:"external"in e?s(e.external):[]}function s(e){return"function"==typeof e?e():e}function c(e){if("object"!=typeof e)throw new Error(`fbContent() args must be an object containing keys: ${o}. Instead got ${e}`);if(!Object.keys(e).find((e=>o.find((t=>t===e)))))throw new Error(`No valid args found in ${JSON.stringify(e)}. Accepted keys: ${o}`);const t=Object.keys(e).filter((e=>!o.find((t=>t===e))));if(t.length>0)throw new Error(`Unexpected keys ${t} found in fbContent() args. Accepted keys: ${o}`)}function d(){try{return Boolean(!1)}catch(e){return console.log("process.env.FB_INTERNAL couldn't be read, maybe you forgot to add the required webpack EnvironmentPlugin config?",e),!1}}function u(){try{return null}catch(e){return console.log("process.env.PHABRICATOR_DIFF_NUMBER couldn't be read, maybe you forgot to add the required webpack EnvironmentPlugin config?",e),null}}t.fbContent=l,t.fbInternalOnly=function(e){return l({internal:e})},t.validateFbContentArgs=c,t.isInternal=d,t.hasEphemeralDiffNumber=function(){return Boolean(u())},t.getEphemeralDiffNumber=u,t.FbInternalOnly=function(e){return d()?e.children:null},t.OssOnly=function(e){return d()?null:e.children}},45458:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(t){i(t)}}function l(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.submitDiff=void 0;const a=n(88266);t.submitDiff=function(e){return r(this,void 0,void 0,(function*(){const{file_path:t,new_content:n,project_name:r,diff_number:i}=e;try{return yield a.call({module:"inpageeditor",api:"createPhabricatorDiffApi",args:{file_path:t,new_content:n,project_name:r,diff_number:i}})}catch(o){throw new Error(`Error occurred while trying to submit diff. Stack trace: ${o}`)}}))}},3730:function(e,t,n){var r=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function o(e){try{s(r.next(e))}catch(t){i(t)}}function l(e){try{s(r.throw(e))}catch(t){i(t)}}function s(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(o,l)}s((r=r.apply(e,t||[])).next())}))};Object.defineProperty(t,"__esModule",{value:!0}),t.getApi=t.docsets=void 0;const a=n(88266);t.docsets={BLOKS_CORE:"887372105406659"},t.getApi=function(e){return r(this,void 0,void 0,(function*(){const{name:t,framework:n,docset:r}=e;return yield a.call({module:"uidocs",api:"getApi",args:{name:t,framework:n,docset:r}})}))}}}]);